package singleton_pattern;


//饿汉式单例类.在类初始化时，已经自行实例化
public class Singleton2 {
	private Singleton2() {
	}

	private static final Singleton2 single = new Singleton2();

	// 静态工厂方法
	public static Singleton2 getInstance() {
		return single;
	}
}
/*
 *饿汉式和懒汉式区别
     从名字上来说，饿汉和懒汉，
     饿汉就是类一旦加载，就把单例初始化完成，保证getInstance的时候，单例是已经存在的了，
     而懒汉比较懒，只有当调用getInstance的时候，才回去初始化这个单例。
     另外从以下两点再区分以下这两种方式：

  1、线程安全：
     饿汉式天生就是线程安全的，可以直接用于多线程而不会出现问题，
     懒汉式本身是非线程安全的，为了实现线程安全有几种写法，分别是上面的1、2、3，这三种实现在资源加载和性能方面有些区别。
  2、资源加载和性能：
     饿汉式在类创建的同时就实例化一个静态对象出来，不管之后会不会使用这个单例，都会占据一定的内存，但是相应的，在第一次调用时速度也会更快，因为其资源已经初始化完成，
     而懒汉式顾名思义，会延迟加载，在第一次使用该单例的时候才会实例化对象出来，第一次调用时要做初始化，如果要做的工作比较多，性能上会有些延迟，之后就和饿汉式一样了。
     至于1、2、3这三种实现又有些区别，
     第1种，在方法调用上加了同步，虽然线程安全了，但是每次都要同步，会影响性能，毕竟99%的情况下是不需要同步的，
     第2种，在getInstance中做了两次null检查，确保了只有第一次调用单例的时候才会做同步，这样也是线程安全的，同时避免了每次都同步的性能损耗
     第3种，利用了classloader的机制来保证初始化instance时只有一个线程，所以也是线程安全的，同时没有性能损耗，所以一般我倾向于使用这一种。
 * 
 * */
 